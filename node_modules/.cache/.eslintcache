[{"/home/gabriel/leste_app/src/index.js":"1","/home/gabriel/leste_app/src/App.js":"2","/home/gabriel/leste_app/src/reportWebVitals.js":"3","/home/gabriel/leste_app/src/routes.js":"4","/home/gabriel/leste_app/src/pages/HomePage/home.jsx":"5","/home/gabriel/leste_app/src/pages/adicionarContato/addContact.jsx":"6","/home/gabriel/leste_app/src/pages/ListaContatos/listaContacts.jsx":"7"},{"size":725,"mtime":1710330918145,"results":"8","hashOfConfig":"9"},{"size":123,"mtime":1709655556813,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1709655556813,"results":"11","hashOfConfig":"9"},{"size":472,"mtime":1709657992608,"results":"12","hashOfConfig":"9"},{"size":466,"mtime":1710446482181,"results":"13","hashOfConfig":"9"},{"size":2858,"mtime":1710365477242,"results":"14","hashOfConfig":"9"},{"size":19508,"mtime":1710445522784,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t11pgw",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/home/gabriel/leste_app/src/index.js",[],[],"/home/gabriel/leste_app/src/App.js",[],[],[],"/home/gabriel/leste_app/src/reportWebVitals.js",[],[],"/home/gabriel/leste_app/src/routes.js",[],[],"/home/gabriel/leste_app/src/pages/HomePage/home.jsx",[],[],"/home/gabriel/leste_app/src/pages/adicionarContato/addContact.jsx",[],[],"/home/gabriel/leste_app/src/pages/ListaContatos/listaContacts.jsx",["39","40","41","42"],[],"import React, { useEffect, useState } from 'react';\nimport logo from '../../assets/logo.png';\nimport addUser from '../../assets/icons/addUser.svg';\nimport close from '../../assets/icons/close.svg';\nimport filtro from '../../assets/icons/filtro.svg';\nimport deleteUserIcon from '../../assets/icons/delete.svg';\nimport edit from '../../assets/icons/edit.svg';\nimport newUser from '../../assets/icons/user.jpg';\nimport AdicionarContato from '../adicionarContato/addContact';\nimport indexList from '../../assets/icons/index.svg';\n\n\nfunction App() {\n  const [users, setUsers] = useState([]); // Armazena a lista de usuários\n  const [selectedUser, setSelectedUser] = useState(null); // Armazena o usuário selecionado para exibição de detalhes\n  const [searchBirthday, setSearchBirthday] = useState(''); //Armazena o valor da busca por ANIVERSARIO\n  const [filterByMonth, setFilterByMonth] = useState(false); //Armazena o valor do filtro por MES\n  const [filterByGender, setFilterByGender] = useState(''); //Armazena o valor do filtro por GENERO\n  const [filterByName, setFilterByName] = useState(false); //Armazena o valor do filtro por NOME\n  const [filterByLanguage, setFilterByLanguage] = useState(false); //Armazena o valor do filtro por IDIOMA\n  const [filterByAge, setFilterByAge] = useState(false); // Armazena o valor do filtro por IDADE\n  const [showAddContact, setShowAddContact] = useState(false); //Controla a exibição do formulário para adicionar contato\n  const [isEditing, setIsEditing] = useState(false); //Indica se o usuário está atualmente editando um contato existente\n  const [editedContact, setEditedContact] = useState(null); //Armazena as informações do contato sendo editado\n  const [userCountByGender, setUserCountByGender] = useState({}); //Armazena contagem de usuários por gênero\n  const [userCountByLanguage, setUserCountByLanguage] = useState({}); //Armazena contagem de usuários por idioma\n  const [isRotated, setIsRotated] = useState(false); //Controla a rotação do botão que exibe a lista estática\n  const [isReversed, setIsReversed] = useState(false); //Reverte a rotação aplicada ao clicar no botão que exibe a lista estática\n\n// Busca e armazena os filtros e conta os usuários ao iniciar a aplicação\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const savedUsers = JSON.parse(localStorage.getItem('users'));\n        if (savedUsers) {\n          setUsers(savedUsers);\n        } else {\n          const response = await fetch('https://my.api.mockaroo.com/api_leste.json?key=7ce8e6d0');\n          const data = await response.json();\n          setUsers(data);\n          localStorage.setItem('users', JSON.stringify(data));\n        }\n\n        const savedFilterSettings = JSON.parse(localStorage.getItem('filterSettings'));\n        if (savedFilterSettings) {\n          setFilterByMonth(savedFilterSettings.filterByMonth);\n          setFilterByGender(savedFilterSettings.filterByGender);\n          setFilterByName(savedFilterSettings.filterByName);\n          setFilterByLanguage(savedFilterSettings.filterByLanguage);\n          setFilterByAge(savedFilterSettings.filterByAge);\n          setSearchBirthday(savedFilterSettings.searchBirthday);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n    CountUsers();\n  }, [users]);\n\n// Armazena os filtros selecionados com a aplicação aberta\n  useEffect(() => {\n    const filterSettings = {\n      filterByMonth,\n      filterByGender,\n      filterByName,\n      filterByLanguage,\n      filterByAge,\n      searchBirthday\n    };\n    localStorage.setItem('filterSettings', JSON.stringify(filterSettings));\n  }, [filterByMonth, filterByGender, filterByName, filterByLanguage, filterByAge, searchBirthday]);\n\n// Exibe os detalhes do usuaŕio\n  const showDetails = user => {\n    setSelectedUser(user);\n    const element = document.getElementById('showContactDetail');\n    if (element) {\n      element.style.display = 'flex';\n    }\n  };\n\n// Fecha a exibição dos detalhes do usuário\n  const closeDetails = () => {\n    document.getElementById('showContactDetail').style.display = 'none';\n  };\n\n// Exibe o painel para escolher o filtro\n  const searchFilter = () => {\n    document.getElementById('filter').style.display = 'flex';\n  };\n\n// Fecha o painel para escolher o filtro e reseta todos os filtros para o estado inicial\n  const closeFilter = () => {\n    document.getElementById('filter').style.display = 'none';\n    setSearchBirthday('');\n    setFilterByMonth(false);\n    setFilterByGender('');\n    setFilterByName(false);\n    setFilterByLanguage(false);\n    setFilterByAge(false);\n  };\n\n// Altera o filtro para buscar por nome\n  const changeNameFilter = () => {\n    setFilterByName(!filterByName);\n  };\n\n// Altera o filtro para buscar por gênero\n  const changeGender = () => {\n    const checkGender = document.getElementById('searchByGender');\n    if (checkGender.checked) {\n      document.getElementById('selectGender').style.display = 'block';\n    } else {\n      document.getElementById('selectGender').style.display = 'none';\n    }\n  };\n\n// Altera o filtro para buscar por idioma\n  const changeLanguageFilter = () => {\n    setFilterByLanguage(!filterByLanguage);\n  };\n\n// Altera o filtro para buscar por idade\n  const changeAgeFilter = () => {\n    setFilterByAge(!filterByAge);\n  };\n\n// Filtra os usuários com base nos filtros selecionados acima\n  const filterUsersByBirthday = () => {\n    //Inicializa a lista de usuários filtrada com todos os usuários\n    let filteredUsers = users;\n    // Verifica se o filtro por mês e a data de busca estão ativados\n    if (filterByMonth && searchBirthday) {\n      //Converte a data de busca em um objeto Date\n      const searchDate = new Date(searchBirthday);\n      //Obtém o número do mês da data de busca\n      const searchMonth = searchDate.getMonth() + 1;\n      //Filtra os usuários cujo mês de aniversário corresponde ao mês de busca\n      filteredUsers = filteredUsers.filter(user => {\n        const userDate = new Date(user.birthday);\n        return userDate.getMonth() + 1 === searchMonth;\n      });\n    }\n    //Verifica se o filtro por gênero está ativado\n    if (filterByGender) {\n      //Filtra os usuários com base no gênero especificado\n      if (filterByGender === 'Other') {\n        filteredUsers = filteredUsers.filter(user => user.gender !== 'Male' && user.gender !== 'Female');\n      } else {\n        filteredUsers = filteredUsers.filter(user => user.gender === filterByGender);\n      }\n    }\n    //Verifica se o filtro por nome e a data de busca estão ativos\n    if (filterByName && searchBirthday) {\n      //FIltra os usuários cujo primeiro nome ou sobrenome contenham a string de busca\n      filteredUsers = filteredUsers.filter(user => user.first_name.toLowerCase().includes(searchBirthday.toLowerCase()) || user.last_name.toLowerCase().includes(searchBirthday.toLowerCase()));\n    }\n    //Verifica se o filtro por idioma está ativado\n    if (filterByLanguage) {\n      //Filtra os usuários com base no idioma especificado\n      filteredUsers = filteredUsers.filter(user => user.language.toLowerCase().includes(searchBirthday.toLowerCase()));\n    }\n    //Verifica se o filtro por idade e a data de busca estão ativados\n    if (filterByAge && searchBirthday) {\n      //Converte a idade da busca para número inteiro\n      const age = parseInt(searchBirthday);\n      //Obtém o ano atual\n      const currentYear = new Date().getFullYear();\n      //Calcula o ano de nascimento com base na idade fornecida\n      const birthYear = currentYear - age;\n      //Filtra os usuários cuja idade corresponde à idade fornecida\n      filteredUsers = filteredUsers.filter(user => {\n        const userYear = new Date(user.birthday).getFullYear();\n        return currentYear - userYear === age;\n      });\n    }\n    //Retorna a lista de usuários filtrada de acordo com os critérios\n    return filteredUsers;\n  };\n  //Chama a função para obter a lista de usuários filtrada\n  const filteredUsers = filterUsersByBirthday();\n\n// Exclui um usuário selecioando\n  const deleteUser = () => {\n    if (selectedUser) {\n      //Adicione um alerta para confirmar a exclusão do usuário\n      const confirmDelete = window.confirm(\"Tem certeza de que deseja excluir este usuário?\");\n      if (confirmDelete) {\n        const updatedUsers = users.filter(user => user.id !== selectedUser.id);\n        setUsers(updatedUsers);\n        localStorage.setItem('users', JSON.stringify(updatedUsers));\n        setSelectedUser(null);\n        document.getElementById('showContactDetail').style.display = 'none';\n      }\n    }\n  };\n\n// Adiciona um novo contato para a lista\n  const saveNewContact = (newContact) => {\n    const maxId = users.reduce((max, user) => (user.id > max ? user.id : max), 0);\n    newContact.id = maxId + 1; // Atribuir o próximo ID disponível\n    const updatedUsers = [...users, newContact];\n    setUsers(updatedUsers);\n    localStorage.setItem('users', JSON.stringify(updatedUsers));\n    setShowAddContact(false);\n  };\n\n// Cancela a criação de um novo contato\n  const cancelAddContact = () => {\n    setShowAddContact(false);\n  };\n\n// Prepara a edição para um usuário selecionado\n  const handleEditarClick = (user) => {\n    setSelectedUser(user);\n    setIsEditing(true);\n    setEditedContact(user);\n    const elementEdit = document.getElementById('showContactEdit');\n    if (elementEdit) {\n      elementEdit.style.display = 'flex';\n    }\n  };\n\n// Salva a edição realizada e aplica ao usuário editado\n  const handleSalvarEdicao = () => {\n    const confirmarEdicao = window.confirm(\"Tem certeza que deseja salvar as alterações?\");\n    if (confirmarEdicao) {\n      const updatedUsers = users.map(user => {\n        if (user.id === editedContact.id) {\n          return editedContact;\n        }\n        return user;\n      });\n      setUsers(updatedUsers);\n      setIsEditing(false);\n      setSelectedUser(null);\n      setEditedContact(null);\n      localStorage.setItem('users', JSON.stringify(updatedUsers));\n    }\n  };\n\n// Conta o número de usuários por gênero e idioma\n  const CountUsers = () => {\n    let filteredUsers = users;\n    let genderCount = {};\n    let languageCount = {};\n\n    filteredUsers.forEach(user => {\n      genderCount[user.gender] = (genderCount[user.gender] || 0) +1;\n      languageCount[user.language] = (languageCount[user.language] || 0) +1;\n    });\n\n    setUserCountByGender(genderCount);\n    setUserCountByLanguage(languageCount);\n  }\n\n// Exibe a lista estática contendo o número de usuários por gênero e idioma\n  const showIndexList = () => {\n    setIsRotated(!isRotated);\n    setIsReversed(false);\n    document.getElementById('listStaticIndex').style.display = \"flex\";\n  }\n\n// Fecha a lista estática contendo o número de usuários por gênero e idioma\n  const closeIndexList = () => {\n    document.getElementById('listStaticIndex').style.display = \"none\";\n    setIsReversed(!isReversed);\n    setIsRotated(false);\n  }\n\n// HTML\n  return (\n    <main className='container'>\n      <div className='listContact'>\n        <div className='header'>\n          <img className='logo' alt='logo' src={logo}></img>\n          <div className='headerFunctions'>\n            <img className='addContact' alt='Adicionar Usuário' src={addUser} onClick={() => setShowAddContact(true)}></img>\n            <input\n              className=\"form-control\"\n              placeholder=\"Buscar Usuário...\"\n              onChange={e => setSearchBirthday(e.target.value)}\n            />\n            <img className='searchFilter' alt='Filtro' onClick={searchFilter} src={filtro}></img>\n          </div>\n          <div className='filter' id='filter'>\n            <div className=\"form-check\">\n              <input\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                value=\"name\"\n                id=\"searchByName\"\n                checked={filterByName}\n                onChange={changeNameFilter}\n              />\n              <label className=\"form-check-label\" htmlFor=\"searchByName\">Nome</label>\n            </div>\n            <div className=\"form-check\">\n              <input\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                value=\"birthday\"\n                id=\"searchByBirthday\"\n                checked={filterByMonth}\n                onChange={() => setFilterByMonth(!filterByMonth)}\n              />\n              <label className=\"form-check-label\" htmlFor=\"searchByBirthday\">Mês</label>\n            </div>\n            <div className=\"form-check\">\n              <input\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                value=\"Age\"\n                id=\"searchByAge\"\n                checked={filterByAge}\n                onChange={changeAgeFilter}\n              />\n              <label className=\"form-check-label\" htmlFor=\"searchByAge\">Idade</label>\n            </div>\n            <div className=\"form-check\">\n              <input\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                value=\"language\"\n                id=\"searchByLanguage\"\n                checked={filterByLanguage}\n                onChange={changeLanguageFilter}\n              />\n              <label className=\"form-check-label\" htmlFor=\"searchByLanguage\">Idioma</label>\n            </div>\n            <div className='form-check'>\n              <input\n                className='form-check-input'\n                type='checkbox'\n                value=\"birthday\"\n                id='searchByGender'\n                onChange={changeGender}\n              />\n              <label className='form-check-label' htmlFor='searchByGender'>Gênero</label>\n            </div>\n            <select id='selectGender' className=\"form-select\" aria-label=\"Selecione o gênero\" value={filterByGender} onChange={e => setFilterByGender(e.target.value)} >\n              <option selected>Selecione o gênero</option>\n              <option value=\"Male\">Masculino</option>\n              <option value=\"Female\">Feminino</option>\n              <option value=\"Other\">Outros</option>\n            </select>\n            <img src={close} className='closeFilter' id='closeFilter' onClick={closeFilter} ></img>\n          </div>\n\n        </div>\n        <ul>\n          {filteredUsers.map(user => (\n            <li key={user.id}>\n              <div className='orgList'>\n                <div className='contact'>\n                  <img className='imageDetail' src={user.avatar} alt=\"Avatar\" />\n                  <p className='nameDetail'>{user.first_name} {user.last_name}</p>\n                  <p className='ageDetail'>{user.birthday}</p>\n                  <p className='languageDetail'>{user.language}</p>\n                  <p className='genderDetail'>{user.gender}</p>\n                </div>\n                <button type=\"button\" className=\"btn btn-success btnDetail\" onClick={() => showDetails(user)} >Detalhes</button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n      {selectedUser && (\n        <div className=\"alert alert-success alert-dismissible fade show showContactDetail\" id='showContactDetail' role=\"alert\">\n          <div className='img'>\n            <img className='avatar' src={selectedUser.avatar} alt='Avatar' />\n          </div>\n          <div className='info'>\n            <img className='close' alt='close' src={close} onClick={closeDetails} ></img>\n            <p className='name'>Nome: {selectedUser.first_name} {selectedUser.last_name}</p>\n            <p className='birthday'>Nascimento: {selectedUser.birthday}</p>\n            <p className='gender'>Gênero: {selectedUser.gender}</p>\n            <p className='idioma'>Idioma: {selectedUser.language}</p>\n            <p className='email'>Email: {selectedUser.email}</p>\n            <p className='id'>ID: {selectedUser.id}</p>\n            <div className='orgUserBtns'>\n              <img className='delete' id='deleteUser' alt='delete' src={deleteUserIcon} onClick={deleteUser}></img>\n              <img className='edit' id='editUser' alt='edit' src={edit} onClick={() => handleEditarClick(selectedUser)} ></img>\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddContact && <AdicionarContato onSave={saveNewContact}  onCancel={cancelAddContact} newUserImage={newUser} />}\n      {isEditing && editedContact && (\n        <div className=\"alert alert-success alert-dismissible fade show showContactDetail\" id='showContactEdit' role=\"alert\">\n          <div className='info'>\n            <div className='formEditUser'>\n              <label className='name'>Nome:</label>\n              <input className='form-control' value={editedContact.first_name} onChange={e => setEditedContact({...editedContact, first_name: e.target.value})} />\n            </div>\n            <div className='formEditUser'>\n              <label className='name'>Sobrenome:</label>\n              <input className='form-control' value={editedContact.last_name} onChange={e => setEditedContact({...editedContact, last_name: e.target.value})} />\n            </div>\n            <div className='formEditUser'>\n              <label className='birthday'>Nascimento:</label>\n              <input className='form-control' value={editedContact.birthday} onChange={e => setEditedContact({...editedContact, birthday: e.target.value})} />\n            </div>\n            <div className='formEditUser'>\n              <label className='gender'>Gênero:</label>\n              <input className='form-control' value={editedContact.gender} onChange={e => setEditedContact({...editedContact, gender: e.target.value})} />\n            </div>\n            <div className='formEditUser'>\n              <label className='idioma'>Idioma:</label>\n              <input className='form-control' value={editedContact.language} onChange={e => setEditedContact({...editedContact, language: e.target.value})} />\n            </div>\n            <div className='formEditUser'>\n              <label className='email'>Email:</label>\n              <input className='form-control' value={editedContact.email} onChange={e => setEditedContact({...editedContact, email: e.target.value})} />\n            </div>\n            <div className='orgEditBtns'>\n              <button className=\"btn btn-success\" onClick={handleSalvarEdicao} >Salvar</button>\n              <button className='btn btn-danger' onClick={() => setIsEditing(false)} >Cancelar</button>\n            </div>\n          </div>\n        </div>\n      )}\n      <div className='listGender' id='listStaticIndex' >\n        <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\" onClick={closeIndexList} ></button>\n            <strong>Quantidade de Usuários por Gênero</strong>\n          <ul>\n            {Object.entries(userCountByGender).map(([gender, count]) => (\n              <li key={gender}>{`${gender}: ${count}`}</li>\n            ))}\n          </ul>\n          <strong>Quantidade de Usuários por Idioma</strong>\n          <ul>\n            {Object.entries(userCountByLanguage).map(([language, count]) => (\n              <li key={language}>{`${language}: ${count}`}</li>\n              ))}\n          </ul>\n        </div>\n      </div>\n      <img src={indexList} className={`staticList ${isRotated ? 'rotated' : ''}`} id='staticListBtn' onClick={showIndexList} ></img>\n    </main>\n  );\n}\nexport default App;\n",{"ruleId":"43","severity":1,"message":"44","line":60,"column":6,"nodeType":"45","endLine":60,"endColumn":13,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":172,"column":13,"nodeType":"49","messageId":"50","endLine":172,"endColumn":22},{"ruleId":"51","severity":1,"message":"52","line":349,"column":13,"nodeType":"53","endLine":349,"endColumn":94},{"ruleId":"51","severity":1,"message":"52","line":442,"column":7,"nodeType":"53","endLine":442,"endColumn":127},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'CountUsers'. Either include it or remove the dependency array.","ArrayExpression",["54"],"no-unused-vars","'birthYear' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"55","fix":"56"},"Update the dependencies array to be: [CountUsers, users]",{"range":"57","text":"58"},[3338,3345],"[CountUsers, users]"]